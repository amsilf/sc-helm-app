# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: PolicyRepository
      type: github
      endpoint: amsilf
      name: amsilf/sc-policy-repo
      ref: main

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            fetchDepth: 1
          - checkout: PolicyRepository
            fetchDepth: 1
          - task: Bash@3
            inputs:
              targetType: inline
              script: 'sudo apt-get -y install zip'
            displayName: 'Install zip'
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'
          - task: OpenPolicyAgentInstaller@0
            inputs:
              opaVersion: 'latest'
          - task: Bash@3
            inputs:
              targetType: inline
              script: 'sudo add-apt-repository ppa:rmescandon/yq && sudo apt update && sudo apt install yq -y'
            displayName: 'Install yq'
          - task: Bash@3
            inputs:
              targetType: inline
              script: 'chmod 755 to_json.sh'
              workingDirectory: $(System.DefaultWorkingDirectory)/sc-helm-app
            displayName: 'Grant execution permissions'
          - task: Bash@3
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/sc-helm-app/to_json.sh'
              arguments: '$(System.DefaultWorkingDirectory)/sc-helm-app'
            displayName: 'To json'

          # - task: Bash@3
          #   inputs:
          #     targetType: inline
          #     script: 'helm template $(System.DefaultWorkingDirectory)/sc-helm-app/sc-helm-chart/ > $(System.DefaultWorkingDirectory)/helm-chart.yml'
          #   displayName: 'Save Helm Chart'
          # - task: Bash@3
          #   inputs:
          #     targetType: inline
          #     script: 'cat $(System.DefaultWorkingDirectory)/helm-chart.yml | yq --split-exp "(.kind | downcase)"'
          #   displayName: 'Helm chart to yml files'
  
          - task: Bash@3
            inputs:
              targetType: inline
              script: 'for f in *.yml; do yq e -o=json ${f} > ${f%.*}.json ; done;'
              workingDirectory: $(System.DefaultWorkingDirectory)/sc-helm-app
            displayName: 'yaml to json'
          - task: Bash@3
            inputs:
              targetType: inline
              script: 'ls -tlra $(System.DefaultWorkingDirectory)/sc-helm-app'
          - task: Bash@3
            inputs:
              targetType: inline
              script: |
                opa eval -i $(System.DefaultWorkingDirectory)/sc-helm-app/deployment.json -d $(System.DefaultWorkingDirectory)/sc-policy-repo/helm/availability/replica.rego 'data'
            displayName: 'Execute OPA rules'
